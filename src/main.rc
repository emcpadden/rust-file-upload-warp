use warp::Filter;
use std::convert::Infallible;
use warp::multipart::FormData;
use futures::TryStreamExt;
use tokio::fs;
use tokio::io::AsyncWriteExt;
use sanitize_filename::sanitize;
use uuid::Uuid;
use std::path::PathBuf;
use std::net::SocketAddr;
use log::{info, error};
use serde::Serialize;
use env_logger::Builder;
use env_logger::Env;
use std::env;
use warp::log::Info;
use bytes::Buf;

#[derive(Serialize)]
struct UploadResponse {
    files: Vec<String>,
}

#[derive(Serialize)]
struct ErrorResponse {
    error: String,
}

fn custom_log(info: Info) {
    log::info!(
        "{} \"{} {} {:?}\" {} {:?}",
        info.remote_addr().unwrap_or_else(|| std::net::SocketAddr::from(([0, 0, 0, 0], 0))),
        info.method(),
        info.path(),
        info.version(),
        info.status().as_u16(),
        info.elapsed(),
    );
}

async fn upload_handler(
    id: String,
    file_type: String,
    mut form: FormData,
) -> Result<impl warp::Reply, Infallible> {
    info!("Handler invoked with ID: {} and Type: {}", id, file_type);
    
    let upload_timeout = std::time::Duration::from_secs(3600);
    
    let result = tokio::time::timeout(upload_timeout, async {
        let id = sanitize(&id);
        let file_type = sanitize(&file_type);
        let uploads_dir = PathBuf::from("./uploads");

        if let Err(e) = fs::create_dir_all(&uploads_dir).await {
            error!("Failed to create uploads directory: {}", e);
            return warp::reply::with_status(
                warp::reply::json(&ErrorResponse {
                    error: "Failed to create uploads directory".to_string(),
                }),
                warp::http::StatusCode::INTERNAL_SERVER_ERROR,
            );
        }

        info!("Uploads directory is ready at: {}", uploads_dir.display());
        let mut saved_files = Vec::new();

        while let Ok(Some(part)) = form.try_next().await {
            if let Some(filename) = part.filename() {
                info!("Processing file: {}", filename);
                let sanitized_filename = sanitize(filename);
                info!("Sanitized filename: {}", sanitized_filename);
                let unique_id = Uuid::new_v4();
                info!("Generated UUID: {}", unique_id);
                let new_filename = if let Some(ext) = PathBuf::from(&sanitized_filename).extension() {
                    format!(
                        "{}-{}-{}-{}.{}",
                        PathBuf::from(&sanitized_filename)
                            .file_stem()
                            .and_then(|s| s.to_str())
                            .unwrap_or("unnamed_file"),
                        id,
                        file_type,
                        unique_id,
                        ext.to_str().unwrap_or("")
                    )
                } else {
                    format!("{}-{}-{}-{}", sanitized_filename, id, file_type, unique_id)
                };
                let filepath = uploads_dir.join(&new_filename);
                info!("Saving file to: {}", filepath.display());

                match fs::File::create(&filepath).await {
                    Ok(mut file) => {
                        let mut stream = part.stream();
                        while let Ok(Some(chunk)) = stream.try_next().await {
                            if let Err(e) = file.write_all(chunk.chunk()).await {
                                error!("Failed to write to file {}: {}", filepath.display(), e);
                                return warp::reply::with_status(
                                    warp::reply::json(&ErrorResponse {
                                        error: "Failed to write file".to_string(),
                                    }),
                                    warp::http::StatusCode::INTERNAL_SERVER_ERROR,
                                );
                            }
                        }
                        saved_files.push(new_filename);
                    }
                    Err(e) => {
                        error!("Failed to create file {}: {}", filepath.display(), e);
                        return warp::reply::with_status(
                            warp::reply::json(&ErrorResponse {
                                error: "Failed to create file".to_string(),
                            }),
                            warp::http::StatusCode::INTERNAL_SERVER_ERROR,
                        );
                    }
                }
            }
        }

        if !saved_files.is_empty() {
            warp::reply::with_status(
                warp::reply::json(&UploadResponse { files: saved_files }),
                warp::http::StatusCode::OK,
            )
        } else {
            warp::reply::with_status(
                warp::reply::json(&ErrorResponse {
                    error: "No files uploaded".to_string(),
                }),
                warp::http::StatusCode::BAD_REQUEST,
            )
        }
    })
    .await;

    match result {
        Ok(reply) => Ok(reply),
        Err(_) => Ok(warp::reply::with_status(
            warp::reply::json(&ErrorResponse {
                error: "Upload timed out".to_string(),
            }),
            warp::http::StatusCode::REQUEST_TIMEOUT,
        )),
    }
}

#[tokio::main]
async fn main() {
    Builder::from_env(Env::default().default_filter_or("info")).init();
    info!("Logger initialized.");

    let uploads_dir = env::var("UPLOADS_DIR").unwrap_or_else(|_| "./uploads".to_string());
    let server_addr = env::var("SERVER_ADDR").unwrap_or_else(|_| "127.0.0.1:8080".to_string());
    info!("Uploads directory: {}", uploads_dir);
    info!("Server address: {}", server_addr);

    if let Err(e) = tokio::fs::create_dir_all(&uploads_dir).await {
        error!("Failed to create uploads directory {}: {}", uploads_dir, e);
        panic!("Exiting due to failed uploads directory creation.");
    }
    info!("Uploads directory created successfully.");

    let upload_route = warp::path!("upload" / String / String)
        .and(warp::post())
        .and(warp::multipart::form().max_length(100 * 1024 * 1024))
        .and_then(upload_handler);

    let routes = upload_route.with(warp::log::custom(custom_log));

    let server_addr_parsed: SocketAddr = match server_addr.parse() {
        Ok(addr) => addr,
        Err(e) => {
            error!("Invalid server address {}: {}", server_addr, e);
            panic!("Exiting due to invalid server address.");
        }
    };

    info!("Starting server at http://{}", server_addr_parsed);

    let (_, server) = warp::serve(routes).bind_with_graceful_shutdown(
        server_addr_parsed,
        async {
            tokio::signal::ctrl_c()
                .await
                .expect("Failed to install CTRL+C signal handler");
            info!("Shutdown signal received");
        },
    );

    server.await;
}
